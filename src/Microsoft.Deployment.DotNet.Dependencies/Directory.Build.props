<Project>

  <Import Project="..\..\Directory.Build.props" />

  <!--
    Before Microsoft.Common.targets, set the extensions path to match the restore dir as Arcade
    sets it, so MSBuild packages with targets files will be found and imported.
  -->
  <PropertyGroup>
    <MSBuildProjectExtensionsPath>$(BaseIntermediateOutputPath)</MSBuildProjectExtensionsPath>
  </PropertyGroup>

  <PropertyGroup>
    <ArcadeSdkMSBuildProjectDir>$([System.IO.Path]::GetDirectoryName('$(ArcadeSdkBuildTasksAssembly)'))\..\</ArcadeSdkMSBuildProjectDir>
    <ArcadeSdkSignProject>$(ArcadeSdkMSBuildProjectDir)Sign.proj</ArcadeSdkSignProject>

    <!-- Clear AssemblyVersion as we need to align with the NuGet conventions, when empty arcade will do that for us. -->
    <AssemblyVersion />
  </PropertyGroup>

  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
    <!-- SDK-based projects' Platform should default to AnyCPU, not $(TargetArchitecture) like Directory.Build.props sets. -->
    <Platform>AnyCPU</Platform>
    <UsingNETSdkCompiler>true</UsingNETSdkCompiler>
    <DisableBuildToolsRoslynVersion>true</DisableBuildToolsRoslynVersion>
  </PropertyGroup>

  <PropertyGroup>
    <SigningToolsDir>$(InstallerProjectRoot)signing\</SigningToolsDir>
  </PropertyGroup>

  <!-- Platform detection -->
  <PropertyGroup>
    <RunningOnUnix Condition="'$(OS)'!='Windows_NT'">true</RunningOnUnix>
    <RunningOnCore Condition="'$(MSBuildRuntimeType)' == 'core'">true</RunningOnCore>
  </PropertyGroup>

  <PropertyGroup>
    <TargetArchitecture  Condition="'$(TargetArchitecture)' == '' AND '$(BuildArchitecture)' == 'arm64'">$(BuildArchitecture)</TargetArchitecture>
    <TargetArchitecture  Condition="'$(TargetArchitecture)' == ''">x64</TargetArchitecture>
    <Platform Condition="'$(Platform)'==''">$(TargetArchitecture)</Platform>
    <TargetOS Condition="'$(TargetOS)' == 'Linux'">Unix</TargetOS>
  </PropertyGroup>

  <PropertyGroup>
    <DebugType Condition="'$(DebugType)' == ''">Portable</DebugType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DisableSourceLink)' == 'true'">
    <EnableSourceLink>false</EnableSourceLink>
    <EnableSourceControlManagerQueries>false</EnableSourceControlManagerQueries>
    <DeterministicSourcePaths>false</DeterministicSourcePaths>
  </PropertyGroup>

  <!-- Set up Default symbol and optimization for Configuration -->
  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
    <DefineConstants>$(DefineConstants),DEBUG,TRACE</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
    <DefineConstants>$(DefineConstants),TRACE</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OutputRid)' == '' and '$(HostMachineRid)' != ''">
    <OutputRid>$(HostMachineRid.Remove($(HostMachineRid.LastIndexOf('-'))))-$(TargetArchitecture)</OutputRid>
  </PropertyGroup>

  <!-- Portable -->
  <PropertyGroup Condition="'$(PortableBuild)' == 'true'">
    <OutputRid Condition="'$(TargetOS)' == 'Windows_NT'">win-$(TargetArchitecture)</OutputRid>
  </PropertyGroup>

  <PropertyGroup>
    <TestTargetRid Condition="'$(TestTargetRid)' == ''">$(OutputRid)</TestTargetRid>
  </PropertyGroup>

  <!-- Produce assets into the specified blob feed. -->
  <PropertyGroup Condition="'$(DotNetOutputBlobFeedDir)' != ''">
    <AssetOutputPath>$(DotNetOutputBlobFeedDir)assets/</AssetOutputPath>
  </PropertyGroup>

  <!-- Set up the default output and intermediate paths -->
  <PropertyGroup>
    <OSPlatformConfig>$(OutputRid).$(Configuration)</OSPlatformConfig>

    <BaseOutputRootPath>$(ArtifactsBinDir)$(OSPlatformConfig)\</BaseOutputRootPath>

    <IntermediateOutputRootPath Condition="'$(IntermediateOutputRootPath)' == ''">$(ArtifactsObjDir)$(OSPlatformConfig)\</IntermediateOutputRootPath>

    <PackagesBasePath Condition="'$(PackagesBasePath)'==''">$(ArtifactsBinDir)$(OSPlatformConfig)/</PackagesBasePath>
    <PackageSymbolsBinDir Condition="'$(PackageSymbolsBinDir)' == ''">$(PackagesBasePath)symbols/</PackageSymbolsBinDir>

    <AssetOutputPath Condition="'$(AssetOutputPath)'==''">$(ArtifactsShippingPackagesDir)</AssetOutputPath>
    <SymbolPackageOutputPath Condition="'$(SymbolPackageOutputPath)'==''">$(ArtifactsShippingPackagesDir)</SymbolPackageOutputPath>
  </PropertyGroup>

  <!-- Set up handling of build warnings -->
  <PropertyGroup>
    <WarningLevel>4</WarningLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <PropertyGroup>
    <TargetsWindows>true</TargetsWindows>
    <TargetsOSX>false</TargetsOSX>
    <TargetsLinux>false</TargetsLinux>
    <TargetsUnix>false</TargetsUnix>
    <TargetsUbuntu>false</TargetsUbuntu>
    <TargetsLinuxMint>false</TargetsLinuxMint>
    <TargetsDebian>false</TargetsDebian>
    <TargetsRhel>false</TargetsRhel>
    <TargetsOpensuse>false</TargetsOpensuse>
    <TargetsFedora>false</TargetsFedora>
    <TargetsCentos>false</TargetsCentos>
    <TargetsOracle>false</TargetsOracle>
    <TargetsSles>false</TargetsSles>
  </PropertyGroup>

  <!-- Use actual publishable (non-dummy) package name produced by the build system for this RID -->
  <PropertyGroup Condition="'$(OutputRid)' != ''">
    <PackageTargetRid>$(OutputRid)</PackageTargetRid>
  </PropertyGroup>

  <PropertyGroup Condition="'$(UsingNETSdkCompiler)' != 'true'">
    <!-- Disable some standard properties for building our projects -->
    <NoStdLib>true</NoStdLib>
    <NoExplicitReferenceToStdLib>true</NoExplicitReferenceToStdLib>
    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>

    <!-- We do not want to target a portable profile.
         TODO: Make this the default in buildtools so this is not necessary. -->
    <TargetFrameworkProfile></TargetFrameworkProfile>
    <!-- We set this property to avoid MSBuild errors regarding not setting TargetFrameworkProfile (see above line) -->
    <PortableNuGetMode>true</PortableNuGetMode>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Never use the NuGet fallback folder that comes with the SDK we use to build.
         The NuGet fallback folder can/will contain packages we are building in this repo, and we
         want to ensure we use the correct packages.
    -->
    <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Disable NuGet static graph evaluation as pkgprojs do their own restore.  -->
    <RestoreUseStaticGraphEvaluation>false</RestoreUseStaticGraphEvaluation>
  </PropertyGroup>

  <PropertyGroup>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <RequireLicenseAcceptance Condition="'$(RequireLicenseAcceptance)' == ''">false</RequireLicenseAcceptance>
    <PackageRequireLicenseAcceptance>$(RequireLicenseAcceptance)</PackageRequireLicenseAcceptance>
    <!-- This link should be updated for each release milestone, currently this points to 1.0.0 -->
    <ReleaseNotes>https://go.microsoft.com/fwlink/?LinkID=799417</ReleaseNotes>
    <ProjectUrl>https://github.com/dotnet/deployment-tools</ProjectUrl>
    <PackagePlatform Condition="'$(PackagePlatform)' == ''">$(Platform)</PackagePlatform>
    <PackagePlatform Condition="'$(PackagePlatform)' == 'amd64'">x64</PackagePlatform>

    <!-- this repo doesn't currently use the index so don't force it to be in sync -->
    <SkipIndexCheck>true</SkipIndexCheck>
  </PropertyGroup>

  <PropertyGroup>
    <PackagesIntermediateDir>$(IntermediateOutputRootPath)packages/</PackagesIntermediateDir>
  </PropertyGroup>

</Project>
