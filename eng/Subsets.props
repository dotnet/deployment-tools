<Project>

  <!--
    This file defines the list of projects to build and divides them into subsets. In ordinary
    situations, you should perform a full build by running 'build.cmd' or './build.sh'. This ensures
    the projects are sequenced correctly so the outputs and test results are what you would expect.

    Examples:

      ./build.sh CoreHost

        This builds only the .NET Core Host.

      ./build.sh corehost installer.managed

        This builds the CoreHost and also the Managed installer portion (e.g. Microsoft.NET.HostModel)
        projects. A space ' ' or '+' are the delimiters between multiple subsets to build.

      ./build.sh -test installer.tests

        This builds and executes the installer test projects. (The '-test' argument is an Arcade SDK argument
        that indicates tests should be run. Otherwise, they'll only be built.)

    Quirks:

      This command looks useful, but doesn't work as expected:

        ./build.sh -test /p:Subset=CoreHost-Test    # (Doesn't work!)

      Intuitively, this should build the host, build the tests, then run the tests on the freshly
      built host. What actually happens is the tests run on a previously built host. This is because
      the depproj, pkgproj, and installer subsets process the host artifacts, and those didn't
      rebuild because those subsets were disabled.

      You can get around this limitation by running the corehost subset, manually copying host
      artifacts to the test layout, then running the test subset.
  -->

  <PropertyGroup>
    <DefaultSubsets>clickonce+installer+dotnet_releases</DefaultSubsets>
    <DefaultSubsets Condition="'$(TargetsMobile)' == 'true'">clickonce+installer</DefaultSubsets>
    <DefaultSubsets Condition="'$(DotNetBuildFromSource)' == 'true'">dotnet_releases</DefaultSubsets>
  </PropertyGroup>

  <!-- Init _subset here in to allow RuntimeFlavor to be set as early as possible -->
  <PropertyGroup>
    <_subset Condition="'$(Subset)' != ''">+$(Subset.ToLowerInvariant())+</_subset>
    <_subset Condition="'$(Subset)' == ''">+$(DefaultSubsets)+</_subset>
  </PropertyGroup>

  <PropertyGroup>
    <RuntimeFlavor Condition="'$(TargetsMobile)' == 'true'">Mono</RuntimeFlavor>
    <RuntimeFlavor Condition="'$(RuntimeFlavor)' == '' and ($(_subset.Contains('+mono+')) or $(_subset.Contains('+mono.runtime+'))) and (!$(_subset.Contains('+clr+')) and !$(_subset.Contains('+clr.runtime+')))">Mono</RuntimeFlavor>
    <RuntimeFlavor Condition="'$(RuntimeFlavor)' == ''">CoreCLR</RuntimeFlavor>
  </PropertyGroup>

  <PropertyGroup>
    <DefaultClickOnceSubsets>clickonce</DefaultClickOnceSubsets>
    <DefaultInstallerSubsets>installer.pkgprojs</DefaultInstallerSubsets>
    <DefaultDotNetReleasesSubsets>dotnet_releases</DefaultDotNetReleasesSubsets>
  </PropertyGroup>

  <PropertyGroup>
    <_subset>$(_subset.Replace('+clickonce+', '+$(DefaultClickOnceSubsets)+'))</_subset>
    <_subset>$(_subset.Replace('+installer+', '+$(DefaultInstallerSubsets)+'))</_subset>
    <_subset>$(_subset.Replace('+dotnet_releases+', '+$(DefaultDotNetReleasesSubsets)+'))</_subset>

    <!-- Surround _subset in dashes to simplify checks below -->
    <_subset>+$(_subset.Trim('+'))+</_subset>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Temporarily disable ClickOnce native build due to compiler mismatch issue with libnethost.lib -->
    <DisableClickOnceNativeBuild>true</DisableClickOnceNativeBuild>
  </PropertyGroup>

  <ItemGroup>
    <!-- ClickOnce -->
    <SubsetName Include="ClickOnce" Description="ClickOnce tools" />

    <!-- Installer -->
    <SubsetName Include="Installer" Description="Generates installers. This produces installers for deployment tools." />
    <SubsetName Include="Installer.PkgProjs" Description="The packaging projects. These produce NETCoreApp assets: NuGet packages, installers, zips, and Linux packages." />
    <SubsetName Include="Installer.Publish" OnDemand="true" Description="Builds the installer publish infrastructure." />

    <!-- DotNetReleases -->
    <SubsetName Include="dotnet_releases" Description="Libary for accessing .NET release data." />
  </ItemGroup>

  <!-- Default targets, parallelization and configurations. -->
  <ItemDefinitionGroup>
    <ProjectToBuild>
      <Test>false</Test>
      <Pack>false</Pack>
      <Publish>false</Publish>
      <BuildInParallel>false</BuildInParallel>
    </ProjectToBuild>
  </ItemDefinitionGroup>

  <!-- ClickOnce sets -->
  <ItemGroup Condition="$(_subset.Contains('+clickonce+'))">
    <ClickOnceProjectToBuild Include="$(ClickOnceProjectRoot)**\*.csproj" Pack="true" SignPhase="Binaries" />
    <ClickOnceProjectToBuild Include="$(ClickOnceProjectRoot)**\*.vcxproj" SignPhase="Binaries" />
    <ClickOnceProjectToBuild Include="$(ClickOnceProjectRoot)**\*.proj" SignPhase="Binaries" Condition="'$(DisableClickOnceNativeBuild)' != 'true'" />
    <ClickOncePkgprojProjectToBuild Include="$(ClickOnceProjectRoot)pkg\projects\**\*.pkgproj" SignPhase="MsiFiles" BuildInParallel="false" Condition="'$(DisableClickOnceNativeBuild)' != 'true'" />
    <ProjectToBuild Include="@(ClickOnceProjectToBuild)" BuildInParallel="true" Category="clickonce" />
    <ProjectToBuild Include="@(ClickOncePkgprojProjectToBuild)" Pack="true" Category="clickonce" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+installer.pkgprojs+'))">
    <InstallerPkgprojProjectToBuild Include="$(InstallerProjectRoot)pkg\projects\**\*.pkgproj" SignPhase="MsiFiles" BuildInParallel="false" />
    <ProjectToBuild Include="@(InstallerPkgprojProjectToBuild)" Pack="true" Category="installer" />
  </ItemGroup>

  <ItemGroup Condition="$(_subset.Contains('+installer.publish+'))">
    <ProjectToBuild Include="$(InstallerProjectRoot)publish\prepare-artifacts.proj" Pack="true" BuildInParallel="false" Category="installer" />
  </ItemGroup>

  <!-- Releases sets -->
  <ItemGroup Condition="$(_subset.Contains('+dotnet_releases+'))">
    <DotNetReleasesProjectToBuild Include="$(DotNetReleasesProjectRoot)src\**\*.csproj" Pack="true" SignPhase="Binaries" />
    <DotNetReleasesProjectToBuild Include="$(DotNetReleasesProjectRoot)tests\**\*.csproj" Test="$(Test)" Condition="'$(DotNetBuildFromSource)' != 'true'"/>
    <ProjectToBuild Include="@(DotNetReleasesProjectToBuild)" BuildInParallel="true" Category="dotnet_releases" />
  </ItemGroup>

  <!-- Set default configurations. -->
  <ItemGroup>
    <ProjectToBuild Update="@(ProjectToBuild)">
      <AdditionalProperties Condition="'%(ProjectToBuild.Category)' == 'clickonce' and '$(ClickOnceConfiguration)' != ''">Configuration=$(ClickOnceConfiguration)</AdditionalProperties>
    </ProjectToBuild>
  </ItemGroup>

</Project>
